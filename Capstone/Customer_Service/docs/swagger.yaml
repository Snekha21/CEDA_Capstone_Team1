openapi: 3.0.0
info:
  title: Customer & Orders API
  version: 1.0.0
  description: REST API for managing customers and their orders
servers:
  - url: http://localhost:5001/api
    description: Local server

paths:
  /customers/orders/{id}:
    get:
      summary: Get order history for a customer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Customer _id
      responses:
        '200':
          description: Array of order objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
              example:
                - _id: "681c6f4b670dd345765209e7"
                  product: "Face cream"
                  price: 34.22
                  quantity: 2
                  customer: "681c452e98d8d7807344ebba"
                  orderDate: "2025-05-08T08:46:03.055Z"
                  __v: 0
                - _id: "681c9abbbe34fba45b5bfaa6"
                  product: "Lip Stick"
                  price: 120.22
                  quantity: 1
                  customer: "681c452e98d8d7807344ebba"
                  orderDate: "2025-05-08T11:51:23.722Z"
                  __v: 0
                - _id: "681c9c4dbe34fba45b5bfac5"
                  product: "Face Serum"
                  price: 249.52
                  quantity: 1
                  customer: "681c452e98d8d7807344ebba"
                  orderDate: "2025-05-08T11:58:05.312Z"
                  __v: 0
        '404':
          description: Customer not found

  /customers/{id}:
    get:
      summary: Get customer by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Customer object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
              example:
                _id: "681c452e98d8d7807344ebba"
                name: "Sushree Pallabi Nayak"
                age: 23
                gender: "Female"
                skinType: "normal"
                email: "test@gmail.com"
                orders:
                  - "681c6f4b670dd345765209e7"
                  - "681c9abbbe34fba45b5bfaa6"
                  - "681c9c4dbe34fba45b5bfac5"
                __v: 3
        '404':
          description: Customer not found

    put:
      summary: Update a customer by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerUpdate'
            example:
              _id: "681c452e98d8d7807344ebba"
              name: "Snekha"
              age: 20
              gender: "Female"
              skinType: "dry"
      responses:
        '200':
          description: Updated customer object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
              example:
                _id: "681c452e98d8d7807344ebba"
                name: "Snekha"
                age: 20
                gender: "Female"
                skinType: "dry"
                email: "test@gmail.com"
                orders:
                  - "681c6f4b670dd345765209e7"
                __v: 1

    delete:
      summary: Delete a customer by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Customer deleted

  /customers/{id}/orders:
    post:
      summary: Add a new order to a customer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Customer _id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreate'
            example:
              product: "Face Serum"
              price: 249.52
              quantity: 1
      responses:
        '200':
          description: Newly created order object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              example:
                _id: "681c9c4dbe34fba45b5bfac5"
                product: "Face Serum"
                price: 249.52
                quantity: 1
                customer: "681c452e98d8d7807344ebba"
                orderDate: "2025-05-08T11:58:05.312Z"
                __v: 0

components:
  schemas:
    Customer:
      type: object
      required:
        - name
        - email
      properties:
        _id:
          type: string
        name:
          type: string
        age:
          type: integer
        gender:
          type: string
        skinType:
          type: string
        email:
          type: string
          format: email
        orders:
          type: array
          items:
            type: string
    CustomerUpdate:
      type: object
      required:
        - _id
        - name
        - age
        - gender
        - skinType
      properties:
        _id:
          type: string
        name:
          type: string
        age:
          type: integer
        gender:
          type: string
        skinType:
          type: string
    Order:
      type: object
      properties:
        _id:
          type: string
        product:
          type: string
        price:
          type: number
        quantity:
          type: integer
        customer:
          type: string
        orderDate:
          type: string
          format: date-time
        __v:
          type: integer
    OrderCreate:
      type: object
      required:
        - product
        - price
        - quantity
      properties:
        product:
          type: string
        price:
          type: number
        quantity:
          type: integer